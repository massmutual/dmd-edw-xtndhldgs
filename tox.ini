[tox]
envlist = clean,build,py37,pre-commit-lint,black,flake8,mypy,isort
skip_missing_interpreters = true

[testenv:pre-commit-lint]
basepython = python3.7
passenv =
    SSH_AUTH_SOCK
skip_install = true
deps =
    isort<5
    pytest-runner
    wemake-python-styleguide==0.14.0
    pre-commit>=2.2.0,<3

commands =
     pre-commit run pydocstyle --all-files --show-diff-on-failure
     pre-commit run check-byte-order-marker --all-files --show-diff-on-failure
     pre-commit run yamllint --all-files --show-diff-on-failure
     pre-commit run bashate --all-files --show-diff-on-failure
     pre-commit run wemake --all-files --show-diff-on-failure

[testenv:black]
basepython = python3.7
skip_install = true
deps =
    black>=19.3b0
commands =
    black -l 120 --check --diff \
    {env:WORKSPACE:{toxinidir}}/src/ \
    {env:WORKSPACE:{toxinidir}}/tests/ \
    {env:WORKSPACE:{toxinidir}}/setup.py

[testenv:flake8]
basepython = python3.7
skip_install = true
deps =
    flake8
    flake8_formatter_junit_xml
whitelist_externals = mkdir
commands =
    mkdir -p {env:WORKSPACE:{toxinidir}}/test_results
    flake8 \
    --format=junit-xml \
    --output={env:WORKSPACE:{toxinidir}}/test_results/{envname}.xml \
    {env:WORKSPACE:{toxinidir}}/src/ \
    {env:WORKSPACE:{toxinidir}}/tests/ \
    {env:WORKSPACE:{toxinidir}}/setup.py

[testenv:mypy]
basepython = python3.7
skip_install = true
deps =
    mypy
whitelist_externals = mkdir
commands =
    mkdir -p {env:WORKSPACE:{toxinidir}}/test_results
    mypy \
    --ignore-missing-imports \
    --junit-xml={env:WORKSPACE:{toxinidir}}/test_results/{envname}.xml \
    {env:WORKSPACE:{toxinidir}}/src/ \
    {env:WORKSPACE:{toxinidir}}/tests/ \
    {env:WORKSPACE:{toxinidir}}/setup.py


[testenv:isort]
basepython = python3.7
skip_install = true
deps =
    isort<5
commands =
    isort --check --diff --recursive \
    {env:WORKSPACE:{toxinidir}}/src/**/*.py \
    {env:WORKSPACE:{toxinidir}}/tests/**/*.py \
    {env:WORKSPACE:{toxinidir}}/setup.py


[testenv:build]
basepython = python3.7
skip_install = true
deps =
    setuptools
    twine
    wheel
commands =
    python setup.py check -q \
    sdist --dist-dir={env:WORKSPACE:{toxinidir}}/dist \
    bdist_wheel --dist-dir={env:WORKSPACE:{toxinidir}}/dist

[testenv:clean]
skip_install = true
deps =
    coverage
whitelist_externals =
    mkdir
    rm
commands =
    coverage erase
    rm -rf {env:WORKSPACE:{toxinidir}}/coverage_html
    mkdir -p {env:WORKSPACE:{toxinidir}}/test_results

[testenv]
skip_install = true
deps:
    moto
    pytest>=5.0.1
    pytest-cov
whitelist_externals = mkdir
commands =
    mkdir -p {env:WORKSPACE:{toxinidir}}/test_results
    /bin/bash -c 'python -m pip install {env:WORKSPACE:{toxinidir}}/dist/*tar.gz'
    pytest --junitxml={env:WORKSPACE:{toxinidir}}/test_results/{envname}.xml

[flake8]
format = wemake
show-source = True
statistics = False
ignore =
    # C812 - Mising trailing comma - conflicts with `black`
    C812,
# WPS210 - too many local vars - meh
    WPS210,
    # WPS211 - Too many arguments - meh
    WPS211,
    # WPS214 - Too many methods - needs refactor
    WPS214,
    # WPS355 - Blank line - conflicts with `black`
    WPS355,
    # WPS400 - old style type hints - need these for python 3.5 support
    WPS400,
    # WPS412 - __init__ file with logic - we use these to simplify imports
    WPS412,
max-line-length = 120
max-complexity = 18
max-imports = 15
max-module-members = 12
max-string-usages = 10
select = B,C,E,F,W,T4,B9
exclude =
    .git,
    __pycache__,
    venv,
    .mypy_cache,
    .pytest_cache,
    .tox,
per-file-ignores =
    # F401 - Unused imports - ok in __init__.py files
    # WPS201 - Too many imports - ok in __init__.py files
    src/aifrps_etl/__init__.py: F401, WPS201
    src/aifrps_etl/**/__init__.py: F401, WPS201
    # B008 - No function calls in args - Conflicts with `typer`
    # WPS404, 425, 323 - Conflict with typer
    src/aifrps_etl/cli.py: B008, WPS404, WPS425, WPS323


[isort]
known_first_party = aifrps_etl,utility_mixins
known_third_party = typer,setuptools
forced_separate = aifrps_etl
line_length = 120
force_single_line = True
order_by_type = True
lines_between_types = 1
force_sort_within_sections = False

[pydocstyle]
inherit = false
match = (?!.*(test_|__version__)).*\.py

[pytest]
addopts =
    -vv
    --cov-branch
    --cov-report=term-missing
    --cov-report=html
    --cov-report=xml
    --cov-append
    --cov=aifrps_etl tests/

filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

junit_family =
    xunit2

[coverage:run]
branch = True
parallel = True

[coverage:report]
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:

ignore_errors = True
show_missing = True
precision = 2
skip_covered = False

[coverage:html]
directory = coverage_html
